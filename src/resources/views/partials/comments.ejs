<h2><i class="fas fa-comments"></i> Bình luận (<span id="comment_counter"><%= comments.length %></span>)</h2>
<span>Like Fanpage để ủng hộ Manga chúng mình và cập nhật các thông tin mới nhất về các bộ truyện nhé. </span>
<div class="fb-like" data-href="/" data-width="" data-layout="standard" data-action="like" data-size="small" data-share="true"></div>
<div id="fb-root"></div>
<% if (user !== null) {%>
<form action="#" method="POST">
  <div class="myComment">
    <div class="comment__user p-2 bg-primary d-inline-block">
      <img class="comment__avatar" src="/getAvatar/<%= user.avatar %>" width="40px" alt="avatar">
      <b class="comment__username text-light"> <%= user.username %> </b>
    </div>
    <textarea class="form-control" name="content" id="content" cols="30" rows="5" placeholder="Nội dung bình luận ...">
         </textarea>
  </div>
  <div class="text-center mt-3">

    <button type="submit" class="btn btn-primary" onclick="submitComment(event,`
   <% if (chapter) { %>
    <%= chapter %>
  <%}else{%>
    null
  <%}%>
   `,`<%= user._id %>`,`<%= manga._id %>`,`<%= user.username %>`,`<%= user.avatar %>`,`<%= moment().fromNow() %>`)">Gửi bình luận <i class="fas fa-paper-plane"></i> </button>
  </div>
</form>
<% } else{ %>
<h2>Hãy đăng nhập trước khi bình luận ^^ !</h2>
<% }  %>

<hr>

<% if (user !== null) {%>
<ul class="comment-zone" data-mangaId="<%= manga._id %>" data-userId="<%= user._id %>">
  <%- include("skeleton.ejs") %>
</ul>
<% } else{ %>
<ul class="comment-zone" data-mangaId="<%= manga._id %>" data-userId="">
  <%- include("skeleton.ejs") %>
</ul>
<% }  %>


<div id="paging-comment">


</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>
<script src="/js/pagination.min.js"></script>
<script src="/js/moment-with-locales.min.js"></script>

<script>
  const dataMangaId = document.querySelector(".comment-zone").getAttribute("data-mangaId");
  const dataUserId = document.querySelector(".comment-zone").getAttribute("data-userId");
  const sumComments = document.getElementById("comment_counter");

  const pagingObj = {
    dataSource: "/comment/list/" + dataMangaId,
    locator: "data",
    showGoInput: true,
    showGoButton: true,
    totalNumberLocator: function(response) {
      return response.data.length;
    },
    pageSize: 2,
    callback: showListAfterPaging,
  }
  const pagingComment = $('#paging-comment')

  function loadComment() {
    pagingComment.pagination(pagingObj);
  }
  loadComment()

  function showListAfterPaging(data, pagination) {
    $(".comment-zone").html("")
    $.ajax({
        url: `/comment/list/${dataMangaId}?page=${pagination.pageNumber}&limit=${pagination.pageSize}`
      })
      .then(rs => {
        for (var i = 0; i < rs.data.length; i++) {
          const comment = rs.data[i];
          const htmls = `
            <div class="comment" id="${comment._id}" data-userId ="${comment.userId._id}">
              <div class="d-flex">
                  <img class="comment__avatar" src="/getAvatar/${comment.userId.avatar}" alt="avatar">
                <div class="comment__detail">
                  ${ (comment.chapter === -1) ? `<span class="badge badge-warning">
                    Tổng quan
                  </span> `: `<span class="badge badge-success">
                    Chương ${comment.chapter}
                  </span> `}
                 
                  <p class="comment__whose">
                    <b> ${ comment.userId.username }</b>
                    <span class="mr-1"> ${ comment.role === "M" && "Thành viên" } </span>
                    <small> <i> ${moment(comment.createdAt).locale("vi").fromNow() }</i> </small>
                  </p>
                   <pre class="comment__content"> ${ comment.content } 
                    </pre>
                  <div class="comment__behaviour">
                    <span class="like-comment">
                        <label for="like-comment-${comment._id}"><i class="fa fa-thumbs-up"></i>
                       <span id="count-like-${comment._id}">${ comment.likes }</span></label>
                      <input type="checkbox" id="like-comment-${comment._id}" data-commentId="${comment._id}" onchange="likeComment(this)" hidden>
                    </span>
                    <span class="response-comment" onclick="toggleReplyInput('${comment._id}','${comment.userId.username}')">
                      <i class="fas fa-comment"></i> Trả lời
                    </span>
                    ${ dataUserId === comment.userId._id ? `<span class="delete-comment" data-commentId="${comment._id}" onclick="deleteComment(this)">
                      <i class="fas fa-trash"></i> Xóa
                    </span>
                    <span class="update-comment" data-commentId="${comment._id}" onclick="toggleEdit(this)">
                      <i class="fas fa-edit"></i> Sửa
                    </span>`:""}
                  </div>
              </div>
            </div>
              <div id="textarea-reply-${comment._id}">

              </div>
              <div class="reply-zone">
                  ${ comment.replies.length > 0 ?`<a href='#' onclick="showReplies(event,'${comment._id}')"><i class="fas fa-reply fa-rotate-180"></i> ${comment.replies.length} phản hồi</a>`
                  :""}
              </div>
          `
          $(".comment-zone").append(htmls)

        }
      })
      .catch((error) => console.log(error))
  }

  function submitComment(event, chapter, userId, mangaId, username, avatar, time) {
    event.preventDefault();

    const content = document.querySelector("#content");

    const payload = {
      userId: userId,
      content: content.value,
      chapter: chapter.trim(),
      mangaId: mangaId
    }
    const headers = {
      "content-Type": "application/json",
    };
    fetch("/comment", {
        method: "POST",
        body: JSON.stringify(payload),
        headers,
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          sumComments.innerHTML = result.data.countComment
          loadComment()
        } else {
          swal({
            title: "Có lỗi rồi !",
            text: result.message,
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
  }

  function deleteComment(it) {
    const commentId = it.getAttribute("data-commentId");
    swal({
        title: "Bạn có chắc muốn xóa bình luận này không?",
        text: "Khi xóa sẽ không thể khôi phục bình luận nữa :>",
        icon: "warning",
        buttons: true,
        dangerMode: true,
      })
      .then((willDelete) => {
        if (willDelete) {
          const headers = {
            "content-Type": "application/json",
          };
          fetch(`/comment/${commentId}`, {
              method: "DELETE",
              headers,
            })
            .then((response) => response.json())
            .then((result) => {
              if (result.isSuccess === true) {
                sumComments.innerHTML = result.data.countComment
                loadComment()
              } else {
                swal({
                  title: "Có lỗi rồi",
                  text: result.message,
                  icon: "error",
                  button: "OK!",
                });
              }
            })
            .catch((error) => console.log(error));
        };
      });

  }


  function toggleEdit(it) {
    const commentId = it.getAttribute("data-commentId");
    const comment = document.getElementById(commentId);
    const content = comment.querySelector(".comment__content");
    const behaviour = comment.querySelector(".comment__behaviour");
    const preContent = content.innerHTML;
    content.classList.add("resize");
    content.innerHTML = ` 
      <textarea class = "form-control comment__content" id="edit_content-${commentId}" cols = "25" rows = "5" placeholder = "Nội dung bình luận ..."> ${content.innerHTML} </textarea>`;
    behaviour.innerHTML = `
        <span class="cancel-edit-comment mr-4"  onclick="cancelEditComment()">
                 <i class="fas fa-ban"></i> Hủy
       </span>
      <span class="submit-edit-comment ml-4" style="float:right" data-commentId="${commentId}" onclick="submitEditComment(this)">
               <i class="fas fa-paper-plane"></i> Gửi
      </span>
      `
    $(`#edit_content-${commentId}`).emojioneArea({
      pickerPosition: "bottom",
    })
  }

  function cancelEditComment() {
    const activePage = document.querySelector(".paginationjs-page.J-paginationjs-page.active").getAttribute("data-num");
    showListAfterPaging(null, {
      pageNumber: activePage,
      pageSize: pagingObj.pageSize
    })
  }

  function submitEditComment(it) {
    const commentId = it.getAttribute("data-commentId");
    const activePage = document.querySelector(".paginationjs-page.J-paginationjs-page.active").getAttribute("data-num");
    const contentEdit = document.getElementById(`edit_content-${commentId}`);
    const payload = {
      content: contentEdit.value,
    }
    const headers = {
      "content-Type": "application/json",
    };
    fetch(`/comment/${commentId}`, {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload),
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          showListAfterPaging(null, {
            pageNumber: activePage,
            pageSize: pagingObj.pageSize
          })
        } else {
          swal({
            title: "Có lỗi rồi",
            text: result.message,
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
  }

  function likeComment(it) {
    const commentId = it.getAttribute("data-commentId");
    const spanCountLike = document.getElementById(`count-like-${commentId}`)
    const payload = {
      flag: it.checked,
    }
    const headers = {
      "content-Type": "application/json",
    };
    fetch(`/comment/like/${commentId}`, {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload),
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          payload.flag === true ? spanCountLike.innerHTML = result.data + 1 :
            spanCountLike.innerHTML = result.data - 1;
        } else {
          swal({
            title: "Có lỗi rồi",
            text: result.message,
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
  }
</script>

<script>
  function showReplies(event, commentId) {
    event.preventDefault();
    $.ajax({
        url: `/comment/list/reply/${commentId}`
      })
      .then(rs => {
        const replies = rs.data.replies;
        document.getElementById(`${commentId}`).querySelector(".reply-zone").innerHTML = ""
        const htmls = ` ${replies.map(function (reply,index) {
            return `<div class="d-flex ${index !== 0 && 'mt-2'}" id="${reply._id}">
              <img class="reply__avatar" src="/getAvatar/${reply.from.avatar}" alt="avatar"/>
              <div class="reply__detail">
                <p class="reply__whose">
                  <b>${reply.from.username}</b> <span>Thành viên</span>
                  <small> <i>${moment(reply.createdAt).locale("vi").fromNow()}</i> </small>
                </p>
                <p class="reply__content">Trả lời <span class="badge badge-warning">${reply.to.username}</span> : ${reply.replyContent}</p>
                <div class="reply__behaviour">
                  <span class="like-reply">
                      <label for="like-reply-${reply._id}"><i class="fa fa-thumbs-up"></i>
                      <span id="count-like-reply-${reply._id}">${ reply.replyLikes }</span></label>
                    <input type="checkbox" id="like-reply-${reply._id}" data-replyId="${reply._id}" onchange="likeReply(this)" hidden/>
                  </span>
                  <span class="response-reply">
                    <i class="fas fa-reply"></i> Trả lời
                  </span>
                  ${ dataUserId === reply.from._id ? `<span class="delete-reply" data-replyId="${reply._id}" data-commentId="${commentId}" onclick="deleteReply(this)">
                    <i class="fas fa-trash"></i> Xóa
                  </span>
                  <span class="update-reply" data-replyId="${reply._id}" onclick="toggleEditReply(this)">
                    <i class="fas fa-edit"></i> Sửa
                  </span>`:""}
                </div>
              </div>
            </div>`
            }).join("")}
          `
        document.getElementById(`${commentId}`).querySelector(".reply-zone").innerHTML = htmls

        // }
      })
      .catch((error) => console.log(error))
  }

  function toggleReplyInput(commentId, username) {
    const textareaReply = document.getElementById(`textarea-reply-${commentId}`);
    textareaReply.innerHTML = `<span class="badge badge-info">Trả lời: </span> <b>${username}</b>
      <textarea class="form-control" name="content" id="reply_content-${commentId}" cols="30" rows="5" placeholder="Nội dung phản hồi ...">
                   </textarea>
      <button class="btn btn-secondary mt-2" data-commentId="${commentId}" onclick="cancelReply(this)">Hủy
      </button>
      <button class="btn btn-primary mt-2 float-right" data-commentId="${commentId}" onclick="submitReply(this)">Gửi
      </button>`
    $(`#reply_content-${commentId}`).emojioneArea({
      pickerPosition: "bottom",
    })
  }

  function deleteReply(it) {
    const replyId = it.getAttribute("data-replyId");
    const commentId = it.getAttribute("data-commentId");
    const payload = {
      commentId
    }
    swal({
        title: "Bạn có chắc muốn xóa phản hồi này không?",
        text: "Khi xóa sẽ không thể khôi phục nữa :>",
        icon: "warning",
        buttons: true,
        dangerMode: true,
      })
      .then((willDelete) => {
        if (willDelete) {
          const headers = {
            "content-Type": "application/json",
          };
          fetch(`/comment/reply/${replyId}`, {
              method: "DELETE",
              headers,
              body: JSON.stringify(payload),
            })
            .then((response) => response.json())
            .then((result) => {
              if (result.isSuccess === true) {
                const deletedReplyTag = document.getElementById(replyId);
                deletedReplyTag.remove();
              } else {
                swal({
                  title: "Có lỗi rồi",
                  text: result.message,
                  icon: "error",
                  button: "OK!",
                });
              }
            })
            .catch((error) => console.log(error));
        };
      });
  }

  function likeReply(it) {
    const replyId = it.getAttribute("data-replyId");
    const spanReplyLike = document.getElementById(`count-like-reply-${replyId}`);
    const payload = {
      flag: it.checked,
    }
    const headers = {
      "content-Type": "application/json",
    };
    fetch(`/comment/reply/like/${replyId}`, {
        method: "PATCH",
        headers,
        body: JSON.stringify(payload),
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          payload.flag === true ? spanReplyLike.innerHTML = result.data + 1 :
            spanReplyLike.innerHTML = result.data - 1;
        } else {
          swal({
            title: "Có lỗi rồi",
            text: result.message,
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
  }

  function cancelReply(it) {
    const commentId = it.getAttribute("data-commentId");
    const textareaReply = document.getElementById(`textarea-reply-${commentId}`)
    textareaReply.innerHTML = ""
  }

  function submitReply(it) {
    const commentId = it.getAttribute("data-commentId");
    const replyContent = document.getElementById(`reply_content-${commentId}`).value;
    const userIdOfComment = document.getElementById(commentId).getAttribute("data-userId");
    const payload = {
      commentId,
      replyContent,
      to: userIdOfComment,
    }
    console.log(payload)
    const headers = {
      "content-Type": "application/json",
    };
    fetch("/comment/reply", {
        method: "POST",
        body: JSON.stringify(payload),
        headers,
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          loadComment();
        } else {
          swal({
            title: "Có lỗi rồi !",
            text: result.message,
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
  }
</script>