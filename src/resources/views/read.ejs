<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- <meta http-equiv="refresh" content="5"> -->
  <title>READ</title>
  <%- include("partials/link") %>
  <link rel="icon" href="/image/tablogo.png">
  <link rel="stylesheet" href="/css/read.css">
  <link rel="stylesheet" href="/css/jquery.toolbar.css">
</head>

<body>
  <%- include('partials/header') %>

  <section class="section container mt-3" id="section-1">
    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="/">Trang chủ</a></li>
        <li class="breadcrumb-item">
          <a href="/detail/<%= reading.slug%>"> <%= reading.slug%></a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">chapter-<%= reading.Chapters.chapters.chapterNumber%></li>
        <li class="float-right" aria-current="page" style="width: 75%;">
          <div class="float-right">
            <button class="view-mode-button" aria-label="Toggle View Mode" onclick="toggle_view_mode()" data-toggle="tooltip" data-placement="bottom" title="Chế độ đọc">
              <span></span>
              <span></span>
            </button>
          </div>
        </li>
      </ol>
    </nav>
    <div class="text-light d-flex justify-content-between">
      <div class="btns-nav">
      </div>

      <span class="darkmode float-right">
        Đăng lúc: <span class="badge badge-primary"><%= moment(reading.Chapters.chapters.createdTime).format("L") %> - <%= moment(reading.Chapters.chapters.createdTime).format("LT") %></span>

      </span>
    </div>
    <div class="text-light text-center">
      <span class="badge badge-secondary">Chương <%= reading.Chapters.chapters.chapterNumber%> - Tựa đề:</span>
      <h2 class="darkmode">
        <%= reading.Chapters.chapters.chapterName%>
      </h2>
    </div>
  </section>
  <section class="section container" id="section-2">
    <div class="chapter-container" hidden id="chapter-container-row">
      <span id="btn-prev-page" onclick="prevPage(this)"><i class="fas fa-arrow-circle-left fa-2x"></i></span>
      <span id="btn-next-page" onclick="nextPage(this)"><i class="fas fa-arrow-circle-right fa-2x"></i></span>
      <div class="chapter-content">
        <%- reading.Chapters.chapters.chapterContent %>
      </div>
    </div>
    <div class="chapter-container" hidden id="chapter-container-column">
      <%- reading.Chapters.chapters.chapterContent %>
    </div>
  </section>
  <section class="section container text-light text-center" id="section-3">
    <h3 class="text-dark">Bình luận chương <span class="badge badge-success text-light">
        <%= reading.Chapters.chapters.chapterNumber %>
      </span> <i class="fas fa-comments"></i></h3>
    <div class="text-center">
      <div id="fb-root"></div>
      <script async defer crossorigin="anonymous" src="https://connect.facebook.net/vi_VN/sdk.js#xfbml=1&version=v14.0&appId=452307582987806&autoLogAppEvents=1" nonce="AckQt6Ew">
      </script>
      <div id="btn-share"></div>
      </p>
    </div>
    <!-- Plugin Comments Facebook -->
    <div class="comments-area container bg-light">
      <div id="disqus_thread">
      </div>

      <!-- Binh luan commentbox -->
      <div class="commentbox"></div>
      <script src="https://unpkg.com/commentbox.io/dist/commentBox.min.js"></script>
      <script>
        commentBox('5763945776283648-proj');
      </script>
      <!-- ******************************** -->
    </div>
    <!-- ******************************** -->

  </section>
  <section class="section " id="section-4">
    <%- include('partials/navbar') %>
  </section>
  <!-- Modal -->
  <div class="modal fade" id="errorModal" tabindex="-1" role="dialog" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="errorModalLabel">Báo lỗi</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form action="#">
            <label for="from-email">Gửi từ email: </label>
            <input type="email" class="form-control" id="from-email" name="from-email" required>
            <label for="error-content">Nội dung báo lỗi: </label>
            <input type="text" class="form-control" id="error-content" name="error-content" required>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
          <button type="submit" class="btn btn-primary" onclick="submitError()">Gửi Admin</button>
        </div>
      </div>
    </div>
  </div>
  <div id="markdown">
    <i class="fas fa-bookmark fa-2x" data-toggle="tooltip" data-placement="bottom" title="Đánh dấu chương đang đọc" onclick="markdown('<%= reading._id%>','<%= reading.Chapters.chapters.chapterNumber%>')"></i>
  </div>
  <div id="to-top">
    <i class="fas fa-angle-up fa-3x" data-toggle="tooltip" data-placement="bottom" title="Lên đầu trang" onclick="toTop()"></i>
  </div>
  <%- include('partials/footer') %>
</body>
<%- include("partials/script") %>
<script src="/js/libraries/jquery.toolbar.js"></script>
<script>
  function renderNavigationBar(slug) {
    const chapterNumber = Number(window.location.href.split("chapter-")[1]);
    fetch(`/detail/${slug}/navigator`)
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess) {
          const chapters = result.data.Chapters.chapters;
          var indexChapter = chapters.findIndex(
            (chapter) => chapter.chapterNumber === chapterNumber
          );
          let htmls = [];
          chapters.forEach((chapter, index) => {
            htmls.push(`<option value="chapter-${chapter.chapterNumber}" 
            ${chapterNumber===chapter.chapterNumber && "selected" }>
                     <a href="/detail/${slug}/read/chapter-${chapter.chapterNumber}">${chapter.chapterNumber}</a>
                      </option>`);
          });
          document
            .querySelector(".chapter-nav")
            .querySelector(".nav").innerHTML = `${indexChapter !== 0 ? `<a href='/detail/${slug}/read/chapter-${
                  chapters[indexChapter - 1].chapterNumber}'><i class='fas fa-2x  fa-caret-left mr-4'></i></a>`: ""
                }<select class="form-control form-select-sm" onchange="redirectChapter(this)">
                  ${htmls.join("")}
                        </select>
                      ${indexChapter !== chapters.length - 1 ? `<a href="/detail/${slug}/read/chapter-${
                   chapters[indexChapter + 1].chapterNumber}"><i class="fas fa-2x fa-caret-right ml-4"></i></a>`:""}`;

          document.querySelector(".btns-nav").innerHTML = `${indexChapter !== 0 ? `<a href='/detail/${slug}/read/chapter-${
                  chapters[indexChapter - 1].chapterNumber}' class="btn btn-success btn-sm">Chương trước</a>`: ""
          }
          ${indexChapter !== chapters.length - 1 ? `<a href="/detail/${slug}/read/chapter-${
                   chapters[indexChapter + 1].chapterNumber}" class="btn btn-primary btn-sm mt-2">Chương sau</a>`:""}`
        }
      });
  }

  function redirectChapter(it) {
    location.replace(`${it.value}`);
  }
  renderNavigationBar('<%= reading.slug %>');
</script>
<script src="/js/plugins/read.js"></script>
<script>
  $('#button').toolbar({
    content: '#toolbar-options',
  });

  function submitError() {
    const content = document.getElementById("error-content").value;
    const fromEmail = document.getElementById("from-email").value;
    if (!content || !fromEmail) {
      swal({
        title: "Cảnh báo !",
        text: "Bạn phải điền đầy đủ thông tin !",
        icon: "warning",
        button: "OK!",
      });
    } else {
      const payload = {
        fromEmail,
        content
      };
      const headers = {
        "content-Type": "application/json",
      };
      fetch("/user/alert-error", {
          method: "POST",
          body: JSON.stringify(payload),
          headers,
        })
        .then((response) => response.json())
        .then((result) => {
          if (result.isSuccess === true) {
            swal({
              title: "Báo lỗi thành công !",
              text: "Cảm ơn bạn đã báo cáo với chúng tôi !!!",
              icon: "success",
              button: "OK!",
            });
            return;
          } else {
            swal({
              title: "Có lỗi rồi",
              text: "Lỗi do bạn nhập thiếu thông tin hoặc lỗi bên phía server",
              icon: "error",
              button: "OK!",
            });
          }
        })
        .catch((error) => console.log(error));
    }
  }
</script>
<script>
  $('[data-toggle="tooltip"]').tooltip();
  const array = document.querySelector(".chapter-container").querySelectorAll("p img");
  const arrayURL = [];
  array.forEach((item) => {
    arrayURL.push(item.src)
  });
  const chapterContainer = document.querySelector(".chapter-container")
  const chapterContent = document.querySelector(".chapter-content")

  function prevPage(btn) {
    const currentPage = document.querySelector(".chapter-content p img");
    const indexPage = arrayURL.indexOf(currentPage.src)
    if (indexPage === 0) {
      return;
    } else {
      chapterContent.innerHTML = `<p>
        <img src="${arrayURL[indexPage-1]}" />
        </p>`
    }
  }

  function nextPage(btn) {
    const currentPage = document.querySelector(".chapter-content p img");
    const indexPage = arrayURL.indexOf(currentPage.src)
    if (indexPage === (arrayURL.length - 1)) {
      return;
    } else {
      chapterContent.innerHTML = `<p>
       <img src="${arrayURL[indexPage+1]}" />
     </p>`
      // if (indexPage === arrayURL.length - 1) {
      //   console.log(btn)
      //   btn.style.display = "none"
      // }
    }
  }


  //Toggle Darkmode
  const span = document
    .querySelector(".view-mode-button")
    .querySelectorAll("span")[1];


  const containerColumn = document.getElementById("chapter-container-column");
  const containerRow = document.getElementById("chapter-container-row");

  function toggle_view_mode() {
    if (localStorage.getItem("view") === "column") {
      localStorage.view = "row";
      showRow()
      changeRight();
    } else {
      localStorage.view = "column";
      showColumn();
      changeLeft();
    }
  }

  window.onload = () => {
    if (localStorage.getItem("view") === "column") {
      showColumn()
      changeLeft();
    } else if (localStorage.getItem("view") == "row") {
      showRow()
      changeRight();
    } else {
      localStorage.setItem("view", "column")
      showColumn()
      changeLeft();
    }
  };

  function changeLeft() {
    span.style.left = "5px";
    span.style.backgroundColor = "white";
  }

  function changeRight() {
    span.style.left = "45px";
    span.style.backgroundColor = "#343a40";
  }

  function showRow() {
    containerRow.removeAttribute("hidden")
    containerColumn.setAttribute("hidden", "")
    containerRow.querySelector(".chapter-content").innerHTML = `<p>
      <img src="${arrayURL[0]}" />
    </p>`;
  }

  function showColumn() {
    containerColumn.removeAttribute("hidden")
    containerRow.setAttribute("hidden", "")
  }
</script>
<script>
  function addFollow(mangaId) {
    const spanNavbarFollow = document.getElementById("navbar-follow");
    const data = {
      mangaId: mangaId,
    };

    fetch("/follow", {
        method: "POST", // or 'PUT'
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          swal({
            title: "Đã theo dõi",
            text: "Hãy theo dõi bộ này hàng tuần nhé <3",
            icon: "success",
            button: "OK!",
          });
          spanNavbarFollow.innerHTML = ` <span onclick="unFollow('${mangaId}')">
                                              <i class="fas fa-heartbeat"></i>
                                              <p>
                                                Đang theo dõi
                                              </p>
                                          </span>`;
        }
      })
      .catch((error) => {
        console.error("Error:", error);
      });
    // alert("A")
  }

  function unFollow(mangaId) {
    const spanNavbarFollow = document.getElementById("navbar-follow");
    const payload = {
      mangaId: mangaId,
    };
    const headers = {
      "content-Type": "application/json",
    };
    fetch("/follow", {
        method: "DELETE",
        body: JSON.stringify(payload),
        headers,
      })
      .then((response) => response.json())
      .then((result) => {
        if (result.isSuccess === true) {
          swal({
            title: "Đã bỏ theo dõi",
            text: "Cảm ơn bạn đã ủng hộ !",
            icon: "success",
            button: "OK!",
          });
          spanNavbarFollow.innerHTML = `
                                        <span onclick="addFollow('${mangaId}')">
                                          <i class="fas fa-heart"></i>
                                          <p>
                                        Theo dõi
                                          </p>
                                        </span>
                                        `;
        } else {
          swal({
            title: "Thông báo !",
            text: "Bạn phải đăng nhập trước :>",
            icon: "error",
            button: "OK!",
          });
        }
      })
      .catch((error) => console.log(error));
    // alert("B")
  }

  function handleAPI() {
    const spanNavbarFollow = document.getElementById("navbar-follow");
    const mangaId = spanNavbarFollow.getAttribute("data-manga-id");
    fetch(`/user/check-follow/${mangaId}`)
      .then((response) => response.json())
      .then((result) => {
        const check = result.data;
        if (result.isSuccess) {
          if (check.followedList.length !== 0) {
            spanNavbarFollow.innerHTML = `
    <span onclick="unFollow('${mangaId}')">
      <i class="fas fa-heartbeat"></i>
      <p>
        Đang theo dõi
      </p>
    </span>
    `;
          } else if (check.followedList.length === 0) {
            spanNavbarFollow.innerHTML = `
  <span onclick="addFollow('${mangaId}')">
    <i class="fas fa-heart"></i>
    <p>
      Theo dõi
    </p>
  </span>
  `;
          }
        } else {
          spanNavbarFollow.innerHTML = `
  <span onclick="canNotFollow()">
    <i class="fas fa-heart"></i>
    <p>
      Theo dõi
    </p>
  </span>`
        }
      })
      .catch((error) => console.log(error));
  }
  handleAPI();

  function canNotFollow() {
    swal({
      title: "Thông báo !",
      text: "Bạn phải đăng nhập trước :>",
      icon: "error",
      button: "OK!",
    });
  }
</script>
<script>
  function shareSocial() {
    return `
<div class="fb-like" data-href="${window.location.href}" data-width="" data-layout="standard" data-action="like" data-size="small" data-share="true"></div>`
  }
  document.querySelector("#btn-share").innerHTML = shareSocial();
</script>
<script>
  function markdown(mangaId, chapterMarkdown) {
    const payload = {
      mangaId,
      chapterMarkdown,
    }
    fetch("/user/markdown", {
        method: "POST", // or 'PUT'
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      })
      .then((response) => response.json())
      .then((result) => {
        console.log(result)
        if (result.isSuccess) {
          swal({
            title: "Đã đánh dấu chương",
            text: "Nhớ tiếp tục bộ truyện khi có thể nhé 😤",
            icon: "success",
            button: "OK!"
          });
        } else if (!result.isSuccess && result.errorCode === 'UNAUTHORIZED') {
          markdownLocal(mangaId, chapterMarkdown)
          swal({
            title: "Đã đánh dấu chương",
            text: "Nhớ tiếp tục bộ truyện khi có thể nhé 😤",
            icon: "success",
            button: "OK!"
          });
        } else {
          swal({
            title: "Thông báo",
            text: "Có lỗi rồi",
            icon: "error",
            button: "Chờ Admin sửa vậy !"
          });
        }
      })
      .catch((error) => {
        console.error("Error:", error);
      });
  }


  function markdownLocal(mangaId, chapterMarkdown) {
    if (localStorage.getItem("markdowns")) {
      const markdownList = JSON.parse(localStorage.getItem("markdowns"));
      const foundMangaMarked = markdownList.find((markdown, index) => markdown.mangaId === mangaId)
      const foundMangaMarkedIndex = markdownList.findIndex((markdown, index) => markdown.mangaId === mangaId)
      console.log('foundMangaMarked:', foundMangaMarked)
      console.log('foundMangaMarkedIndex:', foundMangaMarkedIndex)
      if (!foundMangaMarked) {
        const newMarkdowns = [{
          mangaId: mangaId,
          chapterMarkdown: Number(chapterMarkdown)
        }, ...markdownList];
        localStorage.setItem("markdowns", JSON.stringify(newMarkdowns));
      } else {
        markdownList.splice(foundMangaMarkedIndex, 1, {
          mangaId: mangaId,
          chapterMarkdown: Number(chapterMarkdown)
        })
        localStorage.setItem("markdowns", JSON.stringify(markdownList));
      }
    } else {
      const markdowns = [{
        mangaId: mangaId,
        chapterMarkdown: Number(chapterMarkdown)
      }];
      localStorage.setItem("markdowns", JSON.stringify(markdowns));
    }
  }
</script>

</html>